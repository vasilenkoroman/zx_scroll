diff --git a/pc_compressor/compressed_line.h b/pc_compressor/compressed_line.h
index a3d634c..4c4b5db 100644
--- a/pc_compressor/compressed_line.h
+++ b/pc_compressor/compressed_line.h
@@ -68,6 +68,13 @@ struct CompressedLine
         drawTicks += 10;
     }
 
+    void jpIx()
+    {
+        data.push_back(0xdd);
+        data.push_back(0xe9);
+        drawTicks += 8;
+    }
+
     void exAf()
     {
         data.push_back(0x08);
@@ -97,7 +104,6 @@ struct CompressedLine
 
     ZxData data;
     std::shared_ptr<Registers> inputRegisters;
-    std::shared_ptr<Registers> outputRegisters;
 
     int drawTicks = 0;
     bool isAltReg = false;
diff --git a/pc_compressor/main.cpp b/pc_compressor/main.cpp
index 4089f89..6383292 100644
--- a/pc_compressor/main.cpp
+++ b/pc_compressor/main.cpp
@@ -341,14 +341,34 @@ void updateTransitiveRegUsage(T& data)
 }
 
 bool compressLineMain(
-    const Context& context,
+    Context context,
     CompressedLine& line,
     Registers& registers)
 {
-    line.inputRegisters.reset(new Registers(registers));
-    bool result = compressLine(context, line, registers,  /*x*/ 0);
-    line.outputRegisters.reset(new Registers(registers));
-    return result;
+    CompressedLine line1, line2;
+    Registers registers1 = registers;
+    Registers registers2 = registers;
+
+    bool success1 = compressLine(context, line1, registers1,  /*x*/ 0);
+
+    context.flags |= oddVerticalCompression;
+    bool success2 = compressLine(context, line2, registers2,  /*x*/ 0);
+
+    if (success2 && line2.data.size() < line1.data.size())
+    {
+        line = line2;
+        line.inputRegisters.reset(new Registers(registers));
+        if (context.flags & interlineRegisters)
+            registers = registers2;
+    }
+    else
+    {
+        line = line1;
+        line.inputRegisters.reset(new Registers(registers));
+        if (context.flags & interlineRegisters)
+            registers = registers1;
+    }
+    return true;
 }
 
 bool compressLine(
@@ -538,25 +558,13 @@ std::future<std::vector<CompressedLine>> compressLinesAsync(const Context& conte
                 Context ctx = context;
                 ctx.y = line;
 
-                CompressedLine line1, line2;
+                CompressedLine line1;
                 Registers registers1 = registers;
-                Registers registers2 = registers;
 
                 compressLineMain(ctx, line1, registers1);
-                ctx.flags |= oddVerticalCompression;
-                bool success = compressLineMain(ctx, line2, registers2);
-                if (success && line2.data.size() < line1.data.size())
-                {
-                    result.push_back(line2);
-                    if (context.flags & interlineRegisters)
-                        registers = registers2;
-                }
-                else
-                {
-                    result.push_back(line1);
-                    if (context.flags & interlineRegisters)
-                        registers = registers1;
-                }
+                result.push_back(line1);
+                if (context.flags & interlineRegisters)
+                    registers = registers1;
             }
             updateTransitiveRegUsage(result);
             return result;
