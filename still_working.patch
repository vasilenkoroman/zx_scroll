diff --git a/pc_compressor/compressed_line.cpp b/pc_compressor/compressed_line.cpp
index c4c6cd0..3884ed1 100644
--- a/pc_compressor/compressed_line.cpp
+++ b/pc_compressor/compressed_line.cpp
@@ -31,7 +31,7 @@ std::vector<Register16> CompressedLine::getUsedRegisters() const
 {
     std::vector<Register16> result;
 
-    for (const auto& reg16: *inputRegisters)
+    for (const auto& reg16: inputRegisters)
     {
         uint8_t hMask = 1 << reg16.h.reg8Index;
         uint8_t lMask = 1 << reg16.l.reg8Index;
diff --git a/pc_compressor/compressed_line.h b/pc_compressor/compressed_line.h
index 8deac37..95b7ae2 100644
--- a/pc_compressor/compressed_line.h
+++ b/pc_compressor/compressed_line.h
@@ -100,7 +100,8 @@ struct CompressedLine
     }
 
     ZxData data;
-    std::shared_ptr<std::vector<Register16>> inputRegisters;
+    std::vector<Register16> inputRegisters;
+    std::vector<Register16> outputRegisters;
 
     int drawTicks = 0;
     bool isAltReg = false;
diff --git a/pc_compressor/main.cpp b/pc_compressor/main.cpp
index 76bd4a9..a7fc9ee 100644
--- a/pc_compressor/main.cpp
+++ b/pc_compressor/main.cpp
@@ -325,10 +325,7 @@ bool compressLineMain(
         line = line1;
 
     for (const auto& reg16 : registers)
-    {
-        line.inputRegisters = std::make_shared<std::vector<Register16>>();
-        line.inputRegisters->push_back(reg16);
-    }
+        line.inputRegisters.push_back(reg16);
 
     if (useSecondLine)
         registers = registers2;
@@ -338,8 +335,6 @@ bool compressLineMain(
     return true;
 }
 
-static Register16 sp("sp");
-
 template <int N>
 bool compressLine(
     const Context& context,
@@ -347,6 +342,7 @@ bool compressLine(
     std::array<Register16, N>& registers,
     int x)
 {
+    static Register16 sp("sp");
 
     while (x <= context.maxX)
     {
diff --git a/zx_scroller/draw_image.asm b/zx_scroller/draw_image.asm
index e96adc4..472e189 100644
--- a/zx_scroller/draw_image.asm
+++ b/zx_scroller/draw_image.asm
@@ -122,9 +122,12 @@ draw_4_lines_and_rt_colors:
                 // total ticks: 134
 
 
-        MACRO draw_8_lines
+draw_8_lines
                 // hl - descriptor
                 // sp - destinatin screen address to draw
+
+                ld b,8
+.rep1:
                 ld a, (hl)                                      ; 7
                 ex af, af'                                      ; 4
                 inc l                                           ; 4
@@ -138,8 +141,10 @@ draw_4_lines_and_rt_colors:
                 ld ix, $ + 5                                    ; 14
                 jp hl                                           ; 4
                 exx                                             ; 4
+                djnz .rep1
+                jp iy
                 // total: 66
-        ENDM
+        
                 // total 66 ticks (15 bytes)
 
         MACRO draw_8_color_lines
@@ -229,7 +234,8 @@ draw_image_and_color
         ld bc, descriptors  + 128 * 2                  ; 10
         add hl, bc                                     ; 11
         ld sp, 16384 + 1024 * 2
-        .8 draw_8_lines
+        ld iy, $+7
+        jp draw_8_lines
 
 /*
         // ----------- draw colors (middle)
@@ -245,7 +251,8 @@ draw_image_and_color
         ld bc, descriptors + 64 * 2                    ; 10
         add hl, bc                                      ; 11
         ld sp, 16384 + 1024 * 4
-        .8 draw_8_lines
+        ld iy, $+7
+        jp draw_8_lines
 
 /*
         // ----------- draw colors (bottom)
@@ -261,7 +268,8 @@ draw_image_and_color
         ld bc, descriptors                              ; 10
         add hl, bc                                      ; 11
         ld sp, 16384 + 1024 * 6
-        .8 draw_8_lines
+        ld iy, $+7
+        jp draw_8_lines
 
         ld sp, (stack_bottom)
         ret                
@@ -386,7 +394,7 @@ ticks_to_wait equ sync_tick - ticks_after_interrupt
 
 max_scroll_offset equ (timings_data_end - timings_data) / 2 - 1
 
-        ld bc, 0h                       ; 10  ticks
+        ld bc, 95h                       ; 10  ticks
         jp .loop
 .lower_limit_reached:
         ld bc,  max_scroll_offset       ; 10 ticks
